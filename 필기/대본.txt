디렉티브태그와 액션태그의 include할 때의 차이는
디렉티브는 단순한게 텍스트가 포함된다이지만
액션태그로 include를 하게 된다면 처리결과까지 포함

디렉티브로 include로 할 경우 파일을 하나라고 생각
액션태그는 왔다리갔다리
디렉티브인 경우 소스가 하나라 변수 공유가 가능하지만
액션태그인 경우에는 변수 공유가 불가능하다.

RequsetDispatcher의 메소드는
forward와 include이다


include와 forward와의 차이점은
include일 경우 제어권은 넘어가지만 책임은 넘어가지 않는다
하지만 forward일 경우에는 책임과 제어권이 넘어간다

ajax, 비동기통신 아작스를 사용할 때 제이쿼리를 사용하면
직접 통신을 해주는 객체를 생성하지 않아도 되지만 사용하지
않게 되면 직접 생성을 해주어야 한다.
ajax의 dataType 이라는 옵션을 활용하면 화면을 동적으로 바꿔줄 수 있다.
비동기 방식은 웹페이지를 리로드하지 않고 데이터를 불러오는 방식
Json이나 xml형태로 필요한 데이터만 받아 갱신


자바스크립트에서는 선언이 먼저고 사용이 나중이되어야 한다
이것이 표준이고 제이쿼리를 사용하면 이 법칙이 무시된다
하지만 주의하자!

스크립틀릿에서의 내용은 was(톰캣)에서 이미 다운로드가 되어서
나오기 때문에 이미 결정되었다.정적이다라고 말할 수 있다.

WEB-INF에 있는 JSP를 접근하려면 외부(웹서버)에서 접근은 불가능하다
내부에서 접근을 해야한다 그래서 보안성이 필요한 파일들을
이곳에서 활용한다
Controller를 이용하여 해당 페이지로 이동하도록 작성


<%="abc" %>
둘다 똑같
<%out.print("abc")%> 

jsp(표준서블릿)과 xxx.do(사용자 정의 서블릿)으로 요청을 받는다
모델1(요청과 서블릿모두 jsp)      모델2(요청은 서블릿, 응답은 jsp)


forward는 값이 유지가 되므로 select할때 사용
sendredirect는 insert update delete 할 때사용한다.

SqlSessionFactory는 myBatis와 연결하는 길을 만들어준다
SqlSession은 (일꾼) 커밋과 롤백을해주는 객체, CRUD


프로시저에는 자바에서 처럼 리턴타입으로 받는것이 아니라
파라미터로 받는다!

세션과 쿠키
쿠키는 클라이언트측에서 관리된다(로컬PC)(알집에서 쿠기 지울수있잖아)
세션은 캐시! 좋은거 보안 굳
쿠키는 중요하지 않은 값들을 저장 보안성이 안좋다

쿠키는 페이지를 리로딩해야 확인이 가능하다 그래서 로그인같은 것을 
할 때는 세션으로 한다

객체주입, 역제어
DI          IoC


제어역전
A a = new A(); 는 순제어
A a= null; 요것이 제어역전(역제어)다
외부에서 인스턴스화를 해준다는 뜻
제어권이 넘어간다
라이프사이클을 외부에서 관리한다

인터페이스는 혼자 인스턴스화를 못하기 때문에
구현체 클래스가 필요하다.

doGet과 doPost 메소드는 톰캣서버와 같은 WAS로 부터
request와 response를 주입받는다.(리턴타입이 무조건 void라는
장애가 있다.)이를 해결하기 위해 설계 리턴타입을 void대신
ActionForward로 설계 한다.

일반클래스 필요조건은 Object를 상속받는 것
HttpServlet을 상속을 받으면 서블릿 클래스
그래서 FrontMVC1은 서블릿 클래스다.


