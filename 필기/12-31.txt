spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

   @Override
   public void configureViewResolvers(ViewResolverRegistry registry) {
      logger.info("configureViewResolvers 호출 성공");
      registry.jsp("/WEB-INF/views/",".jsp");
   }


	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>


java- java -> jar-jar 의존관계

spring - 설치하는 것이 아니다.

spring-context.jar 배포하다.
ApplicationContext.java
객체 주입을 받음.

Sonata myCar = null;

myCar = new Sonata();

ApplicationContext가 동작하려면 스프링 엔진이 필요함.

spring-core.jar 가 필요







안드로이드 생명주기
onCreate() - on

//스프링에서 자원관리를 대신 해줌
//라이프 사이클관리 대신 해줌
init() - service() - detroy()
(@RequestParam(value="bs_file",required=false) MultipartFile bs_file, @RequestParam Map<String,Object> pMap)

파라미터 자리는 본래 null이다.

사용하려면 외부에서 객체 주입을 받아야 한다.

void effectParam(Param p){
p.ival = 500; //NullPointerException
system.out.pring(p.ival); //500
}

main(){
TestParam tp = new TestParam();
Param p = new Param(); // 개발자가 자원관리를 직접하는 경우
tp.effectParam(p);
}

더 이상 web.xml이 꼭 반드시 필요한 것은 아니다.

*.sp설정 - web.xml에다가....

@RequestMapping(value="XXX.sp", method=GET|POST)

@GetMapping(value="XXX.sp")

@PostMapping(value="XXX.sp3")

SimpleUrlHandlerMapping 대신

void - doGet(req, res) , doPost(req, res) 메소드 오버라이딩(상속관계)이니까 req res 없으면 에러

POJO프레임워크는 req,res에 의존적이다.
HttpServlet상속받는다.
doGet이나 doPost를 무조건 사용해야 한다 개불편~

더 독립적이고 싶다면? 결합도를 낮추려면? 상속대신에 implements해야지

스프링은 인터페이스 중심 추상클래스 중심 코딩을 지원함
독립성 높임
결합도 낮춤
재사용성 높임
자유도 높아짐
단위테스트 가능

@Controller어노테이션을 이용하자

class MemberController extends MultiActionController

@Controller
class MemberController //결합도가 낮아졌따!


get
단위테스트 가능
post
단위테스트 불가능